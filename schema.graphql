type Query {
    login(email: String!, password: String!): Boolean!
    products(productFilter: ProductFilter!): [MinifiedProduct!]!
    product(productId: ID!): Product!
    categories: [Category!]!
    userCart(userId: ID!): [CartItem!]!
    userWishlist(userId: ID!): [MinifiedProduct!]!
}

type Mutation {
    register(registerUserInput: RegisterUserInput!): Boolean!
    addProduct(addProductInput: AddProductInput!): Boolean!
    addCategories(addCategoriesInput: [AddCategoryInput!]!): Boolean!
    addProductToCart(userId:ID!, productId: ID!): Boolean!
    removeProductFromCart(userId:ID!, productId: ID, removeAll: Boolean): Boolean!
    addProductToWishlist(userId:ID!, productId: ID!): Boolean!
    removeProductFromWishlist(userId:ID!, productId: ID!): Boolean!
    emptyCart(userId: ID!): Boolean!
}

input ProductFilter {
    productIds: [ID!]
    categoryIds: [ID!]
    text: String
}

type Product {
    id: ID!
    productId: ID!
    title: String!
    price: Float!
    imageUrl: String!
    thumbnailUrl: String!
    description: String!
    categoryIds: [ID!]!
}

type MinifiedProduct {
    id: ID!
    productId: ID!
    title: String!
    price: Float!
    imageUrl: String!
    thumbnailUrl: String!
}

input RegisterUserInput {
    name: String!
    email: String!
    phoneNumber: String!
    password: String!
    userRole: UserRole
}

input AddProductInput {
    title: String!
    description: String!
    price: Float!
    categoryIds: [ID!]!
    thumbnailUrl: String!
    imageUrl: String!
}

enum UserRole {
    ADMIN
    USER
}

type Category {
    categoryId: ID!
    name: String!
    description: String!
    imageUrl: String!
}

input AddCategoryInput {
    name: String!
    description: String!
    imageUrl: String!
}

type CartItem {
    productId: ID!
    title: String!
    price: Float!
    imageUrl: String!
    quantity: Int!
}

schema {
    query: Query
    mutation: Mutation
}
