type Query {
    login(email: String!, password: String!): Boolean!
    products(productFilter: ProductFilter!): [MinifiedProduct!]!
    product(productId: ID!): Product!
    categories: [Category!]!
    userCart(userId: ID!): [CartItem!]!
    userWishlist(userId: ID!): [MinifiedProduct!]!
    orders(userId: ID!): [Order!]!
    shippingAddresses(userId: ID!): [ShippingAddress!]!
    shippingAddress(userId: ID!, addressId: ID!): ShippingAddress!
}

type Mutation {
    register(registerUserInput: RegisterUserInput!): Boolean!
    addProduct(addProductInput: AddProductInput!): Boolean!
    addCategories(addCategoriesInput: [AddCategoryInput!]!): Boolean!
    addProductToCart(userId:ID!, productId: ID!): Boolean!
    removeProductFromCart(userId:ID!, productId: ID, removeAll: Boolean): Boolean!
    addProductToWishlist(userId:ID!, productId: ID!): Boolean!
    removeProductFromWishlist(userId:ID!, productId: ID!): Boolean!
    emptyCart(userId: ID!): Boolean!
    placeOrder(placeOrderInput: PlaceOrderInput!): Boolean!
    contactUs(name: String!, email: String!, phoneNumber: String!): Boolean!
    addShippingAddress(userId: ID!, addUpdateShippingAddressInput: AddUpdateShippingAddressInput!): Boolean!
    updateShippingAddress(userId: ID!, addressId: ID!, addUpdateShippingAddressInput: AddUpdateShippingAddressInput!): Boolean!
    removeShippingAddress(userId: ID!, addressId: ID!): Boolean!
}

input ProductFilter {
    productIds: [ID!]
    categoryIds: [ID!]
    text: String
}

type Product {
    id: ID!
    productId: ID!
    title: String!
    price: Float!
    imageUrl: String!
    thumbnailUrl: String!
    description: String!
    categoryIds: [ID!]!
}

type MinifiedProduct {
    id: ID!
    productId: ID!
    title: String!
    price: Float!
    imageUrl: String!
    thumbnailUrl: String!
}

input RegisterUserInput {
    name: String!
    email: String!
    phoneNumber: String!
    password: String!
    userRole: UserRole
}

input AddProductInput {
    title: String!
    description: String!
    price: Float!
    categoryIds: [ID!]!
    thumbnailUrl: String!
    imageUrl: String!
}

enum UserRole {
    ADMIN
    USER
}

type Category {
    categoryId: ID!
    name: String!
    description: String!
    imageUrl: String!
}

input AddCategoryInput {
    name: String!
    description: String!
    imageUrl: String!
}

type CartItem {
    productId: ID!
    title: String!
    price: Float!
    imageUrl: String!
    quantity: Int!
}

input PlaceOrderInput {
    userId: ID!
    email: String!
    phoneNumber: String!
    name: String!
    addressLine1: String!
    addressLine2: String
    city: String!
    state: String!
    country: String!
    pincode: String!
    orderItems: [OrderItemInput!]!
    modeOfPayment: ModeOfPayment!
}

input OrderItemInput {
    productId: ID!
    quantity: Int!
}

enum ModeOfPayment {
    CREDIT_CARD,
    DEBIT_CARD,
    NET_BANKING,
    UPI,
    COD
}

type Order {
    orderId: ID!
    userId: ID!
    email: String!
    phoneNumber: String!
    name: String!
    addressLine1: String!
    addressLine2: String
    city: String!
    state: String!
    country: String!
    pincode: String!
    orderItems: [OrderItem!]!
    modeOfPayment: ModeOfPayment!
    orderDate: String!
    orderStatus: OrderStatus!
}

type OrderItem {
    productId: ID!
    title: String!
    price: Float!
    imageUrl: String!
    quantity: Int!
}

enum OrderStatus {
    PENDING,
    CONFIRMED,
    SHIPPED,
    DELIVERED,
    CANCELLED
}

input AddUpdateShippingAddressInput {
    name: String!
    addressLine1: String!
    addressLine2: String
    city: String!
    state: String!
    country: String!
    pincode: String!
    addressType: AddressType!
    isDefault: Boolean!
}

enum AddressType {
    HOME
    WORK
    OTHER
}

type ShippingAddress {
    addressId: ID!
    name: String!
    addressLine1: String!
    addressLine2: String
    city: String!
    state: String!
    country: String!
    pincode: String!
    addressType: AddressType!
    isDefault: Boolean!
}

schema {
    query: Query
    mutation: Mutation
}
